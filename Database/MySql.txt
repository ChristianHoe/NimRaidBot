create table POGO_SCAN_AREA
(
ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
ACTIVE BIT NOT NULL DEFAULT 0,
LON_MIN DECIMAL(12,9),
LON_MAX DECIMAL(12,9),
LAT_MIN DECIMAL(12,9),
LAT_MAX DECIMAL(12,9),
MAP_ID INT NOT NULL
)

create table POGO_REL_SCAN_CHAT
(
SCAN_AREA_ID INT NOT NULL,
CHAT_ID BIGINT NOT NULL,
PRIMARY KEY (SCAN_AREA_ID, CHAT_ID)
)

create table POGO_CHAT_POKE
(
CHAT_ID BIGINT NOT NULL,
POKE_ID INT NOT NULL,
�SHOW� BIT NOT NULL,
GENDER CHAR(1),
IV INT,
PRIMARY KEY (CHAT_ID, POKE_ID )
)

create table POGO_USER
(
USER_ID BIGINT NOT NULL PRIMARY KEY,
ACTIVE BIT NOT NULL,
LON_MIN DECIMAL(12,9),
LON_MAX DECIMAL(12,9),
LAT_MIN DECIMAL(12,9),
LAT_MAX DECIMAL(12,9),
FIRST_NAME VARCHAR(200),
INGAME_NAME VARCHAR(200),
INGRESS_NAME VARCHAR(200),
LEVEL INT,
TEAM INT,
GROUP_MEMBERS INT
)

create table POGO_IGNORE
(
USER_ID BIGINT NOT NULL,
MONSTER_ID INT NOT NULL,
PRIMARY KEY (USER_ID, MONSTER_ID)
)

---------

create table POGO_RAID_USERS
(
CHAT_ID BIGINT NOT NULL PRIMARY KEY,
ACTIVE BIT,
LON_MIN DECIMAL(12,9),
LON_MAX DECIMAL(12,9),
LAT_MIN DECIMAL(12,9),
LAT_MAX DECIMAL(12,9),
RAID_LEVEL INT NULL,
CLEAN_UP INT,
NAME VARCHAR (100),
INGRESS BIT NOT NULL DEFAULT 0,
MIN_POKE_LEVEL INT NULL,
TIME_OFFSET_ID INT NULL,
ROUND_TO_MINUTE INT NULL,
KICK_INACTIVE BIT
)

create table ACTIVE_POLLS
(
ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
CHAT_ID BIGINT NOT NULL,
MESSAGE_ID BIGINT NOT NULL,
RAID_ID INT NULL,
EVENT_ID INT NULL
DELETED BIT NOT NULL,
TIME_OFFSET_ID INT NULL
)

CREATE TABLE ACTIVE_POLLS_META
(
POLL_ID INT NOT NULL PRIMARY KEY,
CREATED DATETIME NOT NULL,
FARM BIT,
POKE BIT
)

CREATE TRIGGER TRG_USER_VOTE AFTER INSERT ON USER_VOTES
FOR EACH ROW
  INSERT INTO ACTIVE_POLLS_META (POLL_ID, CREATED, FARM, POKE)
  VALUES (NEW.POLL_ID, UTC_TIMESTAMP(), NULL, NULL)
  ON DUPLICATE KEY UPDATE CREATED=VALUES(CREATED), FARM=VALUES(FARM), POKE=VALUES(POKE);


CREATE TRIGGER TRG_USER_VOTE_UPD AFTER UPDATE ON USER_VOTES
FOR EACH ROW
  INSERT INTO ACTIVE_POLLS_META (POLL_ID, CREATED, FARM, POKE)
  VALUES (NEW.POLL_ID, UTC_TIMESTAMP(), NULL, NULL)
  ON DUPLICATE KEY UPDATE CREATED=VALUES(CREATED), FARM=VALUES(FARM), POKE=VALUES(POKE);


create table USER_VOTES
(
POLL_ID INT NOT NULL,
USER_ID BIGINT NOT NULL,
TIME VARCHAR(10) NULL,
ATTENDEE INT NOT NULL,
COMMENT INT NULL,
PRIMARY KEY (POLL_ID, USER_ID) 
)

CREATE TABLE POGO_GYMS
(
ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
LATITUDE DECIMAL (12,9) NOT NULL,
LONGITUDE DECIMAL (12,9) NOT NULL,
NAME VARCHAR(200) NOT NULL
)

CREATE TABLE POGO_SPECIAL_GYMS
(
GYM_ID INT NOT NULL,
CHAT_ID BIGINT NOT NULL,
TYPE INT NOT NULL,
DATA VARCHAR(200) NULL,
PRIMARY KEY (GYM_ID, CHAT_ID) 
)

CREATE TABLE POGO_RAIDS
(
ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
GYM_ID INT NOT NULL,
START DATETIME NOT NULL,
FINISHED DATETIME NOT NULL,
POKE_ID INT NOT NULL,
LEVEL INT NOT NULL,
CHAT_ID BIGINT NULL,
MOVE2 INT NULL,
OWNER_ID BIGINT NULL,
TITLE VARCHAR(40) NULL,
)

CREATE TABLE POGO_RAIDS_META
(
RAID_ID INT NOT NULL PRIMARY KEY,
CREATED DATETIME NOT NULL,
RAID BIT
)

CREATE TRIGGER TRG_POGO_RAIDS AFTER INSERT ON POGO_RAIDS
FOR EACH ROW
  INSERT INTO POGO_RAIDS_META (RAID_ID, CREATED)
  VALUES (NEW.ID, UTC_TIMESTAMP());

CREATE TRIGGER TRG_POGO_RAIDS_UPD AFTER UPDATE ON POGO_RAIDS
FOR EACH ROW
  INSERT INTO POGO_RAIDS_META (RAID_ID, CREATED, RAID)
  VALUES (NEW.ID, UTC_TIMESTAMP(), NULL)
  ON DUPLICATE KEY UPDATE CREATED=VALUES(CREATED), RAID=VALUES(RAID);

CREATE TABLE POGO_USER_RAIDS
(
USER_ID BIGINT NOT NULL PRIMARY KEY,
GYM_ID INT NULL,
TIME_MODE INT NULL,
START DATETIME NULL,
POKE_ID INT NULL,
LEVEL INT NULL,
CHAT_ID BIGINT NULL,
RAID_ID INT NULL,
UPD_RAID_ID INT NOT NULL,
TITLE VARCHAR(40) NULL
)

CREATE TABLE POGO_RAID_PREFERENCE
(
CHAT_ID BIGINT NOT NULL,
POKE_ID INT NOT NULL,
PRIMARY KEY (CHAT_ID, POKE_ID) 
)

CREATE TABLE POGO_RAID_TIME_OFFSETS
(
SETTING_ID INT NOT NULL,
`ORDER` INT NOT NULL,
OFFSET_IN_MINUTES INT NOT NULL,

PRIMARY KEY (SETTING_ID, `ORDER`)
)

CREATE TABLE POGO_POKES
(
ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
POKE_ID INT NOT NULL,
LATITUDE DECIMAL (12,9) NOT NULL,
LONGITUDE DECIMAL (12,9) NOT NULL,
FINISHED DATETIME NOT NULL,
IV INT NULL,
CP INT NULL,
GENDER INT NULL,
LEVEL INT NULL,
MAP_ID INT,
WEATHER_BOOSTED INT NULL
)

CREATE TABLE POGO_POKES_META
(
POGO_POKE_ID INT NOT NULL PRIMARY KEY,
CREATED DATETIME NOT NULL,
POKE BIT
)

CREATE TRIGGER TRG_POGO_POKES AFTER INSERT ON POGO_POKES 
FOR EACH ROW
  INSERT INTO POGO_POKES_META (POGO_POKE_ID, CREATED)
  VALUES (NEW.ID, UTC_TIMESTAMP());

CREATE TRIGGER TRG_POGO_POKES_UPD AFTER UPDATE ON POGO_POKES
FOR EACH ROW
  INSERT INTO POGO_POKES_META (POGO_POKE_ID, CREATED, POKE)
  VALUES (NEW.ID, UTC_TIMESTAMP(), NULL)
  ON DUPLICATE KEY UPDATE CREATED=VALUES(CREATED), POKE=VALUES(POKE);


CREATE TABLE POGO_REL_POKES_CHATS
(
ID INT NOT NULL AUTO_INCREMENT  PRIMARY KEY,
CHAT_ID BIGINT NOT NULL,
MESSAGE_ID BIGINT NOT NULL,
POKE_ID BIGINT NOT NULL,
DELETED BIT NOT NULL DEFAULT 0
)

CREATE TABLE REL_CHAT_BOT
(
CHAT_ID BIGINT NOT NULL,
BOT_ID BIGINT NOT NULL,
ALLOW_NOTIFICATION BIT NOT NULL,
PRIMARY KEY (CHAT_ID, BOT_ID)
)

CREATE TABLE POGO_STOPS
(
ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
LATITUDE DECIMAL (12,9) NOT NULL,
LONGITUDE DECIMAL (12,9) NOT NULL,
NAME VARCHAR(200) NOT NULL
)

CREATE TABLE POGO_QUESTS
(
STOP_ID INT NOT NULL PRIMARY KEY,
CREATED DATETIME NOT NULL,
TASK VARCHAR(200) NOT NULL,
REWARD VARCHAR(200) NOT NULL
);

CREATE TABLE POGO_QUESTS_META
(
STOP_ID INT NOT NULL PRIMARY KEY,
CREATED DATETIME NOT NULL,
PROCESSED BIT
);

CREATE TABLE POGO_QUESTS_HISTORY
(
STOP_ID INT NOT NULL,
CREATED DATETIME NOT NULL,
TASK VARCHAR(200) NOT NULL,
REWARD VARCHAR(200) NOT NULL,
PRIMARY KEY (STOP_ID, CREATED)
);

CREATE TRIGGER TRG_POGO_QUESTS AFTER INSERT ON POGO_QUESTS
FOR EACH ROW
  INSERT INTO POGO_QUESTS_META (STOP_ID, CREATED, PROCESSED)
  VALUES (NEW.STOP_ID, UTC_TIMESTAMP(), NULL);
;

delimiter //

CREATE TRIGGER TRG_POGO_QUESTS_UPD AFTER UPDATE ON POGO_QUESTS
FOR EACH ROW
BEGIN
  INSERT INTO POGO_QUESTS_META (STOP_ID, CREATED, PROCESSED)
  VALUES (NEW.STOP_ID, UTC_TIMESTAMP(), NULL)
  ON DUPLICATE KEY UPDATE CREATED=VALUES(CREATED), PROCESSED=VALUES(PROCESSED);
  
  INSERT INTO POGO_QUESTS_HISTORY (STOP_ID, CREATED, TASK, REWARD)
  VALUES (OLD.STOP_ID, OLD.CREATED, OLD.TASK, OLD.REWARD);

END //


CREATE TABLE INGR_EVENTS
(
ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
LOCATION_ID INT NULL,
START DATETIME NULL,
FINISHED DATETIME NULL,
CHAT_ID BIGINT NULL,
TYPE_ID INT NULL
)

CREATE TABLE INGR_EVENTS_META 
(
EVENT_ID INT NOT NULL PRIMARY KEY,
CREATED datetime NOT NULL,
FARM bit(1)
)


CREATE TRIGGER TRG_INGR_EVENTS AFTER INSERT ON INGR_EVENTS
FOR EACH ROW
  INSERT INTO INGR_EVENTS_META (EVENT_ID, CREATED)
  VALUES (NEW.ID, UTC_TIMESTAMP());

CREATE TABLE EVENT_SETUPS
(
CHAT_ID BIGINT NOT NULL,
MESSAGE_ID BIGINT NOT NULL,
TARGET_CHAT_ID BIGINT NULL,
LOCATION_ID INT NULL,
TYPE INT NULL,
START DATETIME NULL,
MODIFIED BIT NOT NULL,

primary key (CHAT_ID, MESSAGE_ID)
)

CREATE TABLE LOCATIONS 
( 
ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY, 
LATITUDE DECIMAL NOT NULL,
LONGITUDE DECIMAL NOT NULL,
NAME VARCHAR(200) NOT NULL, 
TYPE INT NOT NULL,
ORDER INT NOT NULL
)

CREATE TABLE BOT_FARM
(
ID INT NOT NULL AUTO_INCREMENT  PRIMARY KEY,
CHAT_ID BIGINT NOT NULL,
BOARD_ID BIGINT NOT NULL
)

create table STATES
(
USER_ID BIGINT NOT NULL,
COMMAND VARCHAR(50) NOT NULL,
STEP INT NOT NULL,
LEVEL INT NOT NULL,
PRIMARY KEY (USER_ID, LEVEL)
)

CREATE TABLE MEMBERSHIPS
(
GROUP_ID BIGINT NOT NULL,
USER_ID BIGINT NOT NULL,
LAST_ACCESS DATETIME NULL,
SECURITY_LEVEL INT NULL,
CREATED DATETIME NULL,

PRIMARY KEY (GROUP_ID, USER_ID)
)

CREATE TABLE POGO_GAME_POKES
(
CHAT_ID BIGINT NOT NULL,
MESSAGE_ID INT NOT NULL, 
DIFFICULTY INT NOT NULL,
FINISH DATETIME NOT NULL,
TARGET_POKE_ID INT NOT NULL,
TARGET_POKE_MOVE_TYP INT NOT NULL,
CHOICE_1_POKE_ID INT NOT NULL,
CHOICE_1_POKE_MOVE_TYP INT NOT NULL,
CHOICE_2_POKE_ID INT NOT NULL,
CHOICE_2_POKE_MOVE_TYP INT NOT NULL,
CHOICE_3_POKE_ID INT NOT NULL,
CHOICE_3_POKE_MOVE_TYP INT NOT NULL,
CHOICE_4_POKE_ID INT NOT NULL,
CHOICE_4_POKE_MOVE_TYP INT NOT NULL,

PRIMARY KEY (CHAT_ID, MESSAGE_ID)
);

CREATE TABLE POGO_GAME_POKES_META
(
CHAT_ID BIGINT NOT NULL,
MESSAGE_ID INT NOT NULL,
CREATED DATETIME NOT NULL,
STATE INT NOT NULL,

PRIMARY KEY (CHAT_ID, MESSAGE_ID)
);


CREATE TRIGGER TRG_POGO_GAME_POKES AFTER INSERT ON POGO_GAME_POKES_META
FOR EACH ROW
  INSERT INTO POGO_GAME_POKES_META (CHAT_ID, MESSAGE_ID, CREATED)
  VALUES (NEW.CHAT_ID, NEW.MESSAGE_ID, UTC_TIMESTAMP(), 0);

CREATE TRIGGER TRG_POGO_GAME_POKES_UPD AFTER UPDATE ON POGO_GAME_POKES_META
FOR EACH ROW
  INSERT INTO POGO_GAME_POKES_META (CHAT_ID, MESSAGE_ID, CREATED, STATE)
  VALUES (NEW.CHAT_ID, NEW.MESSAGE_ID, UTC_TIMESTAMP(), 0)
  ON DUPLICATE KEY UPDATE CREATED=VALUES(CREATED), RAID=VALUES(STATE);


CREATE TABLE POGO_GAME_POKES_ANSWERS
(
CHAT_ID BIGINT NOT NULL,
MESSAGE_ID INT NOT NULL, 
USER_ID BIGINT NOT NULL,
USER_NAME VARCHAR(25) NOT NULL
CREATED DATETIME NOT NULL,
CHOICE INT NOT NULL,

PRIMARY KEY (CHAT_ID, MESSAGE_ID, USER_ID)
);

DELIMITER //
CREATE TRIGGER TRG_POGO_GAME_POKES_ANSWERS BEFORE INSERT ON POGO_GAME_POKES_ANSWERS
FOR EACH ROW BEGIN
  SET NEW.CREATED = UTC_TIMESTAMP();
END//

CREATE TRIGGER TRG_POGO_GAME_POKES_ANSWERS_UPD BEFORE UPDATE ON POGO_GAME_POKES_ANSWERS
FOR EACH ROW BEGIN
  SET NEW.CREATED = UTC_TIMESTAMP();
END//
DELIMITER ;


CREATE TABLE POGO_CONFIGURATIONS
(
ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
RAID_DURATION_IN_MIN INT NOT NULL
);

INSERT INTO POGO_CONFIGURATIONS
VALUES (1, 45);

